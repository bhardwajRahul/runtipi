// This file is auto-generated by @hey-api/openapi-ts

export const UserContextDtoSchema = {
  type: 'object',
  properties: {
    isLoggedIn: {
      description: 'Indicates if the user is logged in',
      type: 'boolean',
    },
    isConfigured: {
      description: 'Indicates if the app is already configured',
      type: 'boolean',
    },
    isGuestDashboardEnabled: {
      description: 'Indicates if the guest dashboard is enabled',
      type: 'boolean',
    },
  },
  required: ['isLoggedIn', 'isConfigured', 'isGuestDashboardEnabled'],
} as const;

export const AppContextDtoSchema = {
  type: 'object',
  properties: {
    version: {
      type: 'object',
      properties: {
        current: {
          type: 'string',
        },
        latest: {
          type: 'string',
        },
        body: {
          type: 'string',
        },
      },
      required: ['current', 'latest', 'body'],
    },
    userSettings: {
      type: 'object',
      properties: {
        dnsIp: {
          type: 'string',
        },
        internalIp: {
          type: 'string',
        },
        postgresPort: {
          type: 'number',
        },
        appsRepoUrl: {
          type: 'string',
          format: 'uri',
        },
        domain: {
          type: 'string',
        },
        appDataPath: {
          type: 'string',
        },
        localDomain: {
          type: 'string',
        },
        demoMode: {
          type: 'boolean',
        },
        guestDashboard: {
          type: 'boolean',
        },
        allowAutoThemes: {
          type: 'boolean',
        },
        allowErrorMonitoring: {
          type: 'boolean',
        },
        persistTraefikConfig: {
          type: 'boolean',
        },
        port: {
          type: 'number',
        },
        sslPort: {
          type: 'number',
        },
        listenIp: {
          type: 'string',
        },
        timeZone: {
          type: 'string',
        },
      },
      required: [
        'dnsIp',
        'internalIp',
        'postgresPort',
        'appsRepoUrl',
        'domain',
        'appDataPath',
        'localDomain',
        'demoMode',
        'guestDashboard',
        'allowAutoThemes',
        'allowErrorMonitoring',
        'persistTraefikConfig',
        'port',
        'sslPort',
        'listenIp',
        'timeZone',
      ],
    },
    user: {
      type: 'object',
      properties: {
        id: {
          type: 'number',
        },
        username: {
          type: 'string',
        },
        totpEnabled: {
          type: 'boolean',
        },
        locale: {
          type: 'string',
        },
        operator: {
          type: 'boolean',
        },
        hasSeenWelcome: {
          type: 'boolean',
        },
      },
      required: ['id', 'username', 'totpEnabled', 'locale', 'operator', 'hasSeenWelcome'],
    },
    apps: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          short_desc: {
            type: 'string',
          },
          categories: {
            type: 'array',
            items: {
              type: 'string',
              enum: [
                'network',
                'media',
                'development',
                'automation',
                'social',
                'utilities',
                'photography',
                'security',
                'featured',
                'books',
                'data',
                'music',
                'finance',
                'gaming',
                'ai',
              ],
            },
            default: [],
          },
          deprecated: {
            type: 'boolean',
            default: false,
          },
          created_at: {
            type: 'integer',
            minimum: 0,
            exclusiveMinimum: false,
            default: 0,
          },
          supported_architectures: {
            type: 'array',
            items: {
              type: 'string',
              enum: ['arm64', 'amd64'],
            },
          },
          available: {
            type: 'boolean',
          },
        },
        required: ['id', 'name', 'short_desc', 'available'],
      },
    },
  },
  required: ['version', 'userSettings', 'user', 'apps'],
} as const;

export const PartialUserSettingsDtoSchema = {
  type: 'object',
  properties: {
    dnsIp: {
      type: 'string',
    },
    internalIp: {
      type: 'string',
    },
    postgresPort: {
      type: 'number',
    },
    appsRepoUrl: {
      type: 'string',
      format: 'uri',
    },
    domain: {
      type: 'string',
    },
    appDataPath: {
      type: 'string',
    },
    localDomain: {
      type: 'string',
    },
    demoMode: {
      type: 'boolean',
    },
    guestDashboard: {
      type: 'boolean',
    },
    allowAutoThemes: {
      type: 'boolean',
    },
    allowErrorMonitoring: {
      type: 'boolean',
    },
    persistTraefikConfig: {
      type: 'boolean',
    },
    port: {
      type: 'number',
    },
    sslPort: {
      type: 'number',
    },
    listenIp: {
      type: 'string',
    },
    timeZone: {
      type: 'string',
    },
  },
} as const;

export const AcknowledgeWelcomeBodySchema = {
  type: 'object',
  properties: {
    allowErrorMonitoring: {
      type: 'boolean',
    },
  },
  required: ['allowErrorMonitoring'],
} as const;

export const LoadDtoSchema = {
  type: 'object',
  properties: {
    diskUsed: {
      type: 'number',
      nullable: true,
      default: 0,
    },
    diskSize: {
      type: 'number',
      nullable: true,
      default: 0,
    },
    percentUsed: {
      type: 'number',
      nullable: true,
      default: 0,
    },
    cpuLoad: {
      type: 'number',
      nullable: true,
      default: 0,
    },
    memoryTotal: {
      type: 'number',
      nullable: true,
      default: 0,
    },
    percentUsedMemory: {
      type: 'number',
      nullable: true,
      default: 0,
    },
  },
} as const;

export const LoginBodySchema = {
  type: 'object',
  properties: {
    username: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
  },
  required: ['username', 'password'],
} as const;

export const LoginDtoSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    totpSessionId: {
      type: 'string',
    },
  },
  required: ['success'],
} as const;

export const VerifyTotpBodySchema = {
  type: 'object',
  properties: {
    totpCode: {
      type: 'string',
    },
    totpSessionId: {
      type: 'string',
    },
  },
  required: ['totpCode', 'totpSessionId'],
} as const;

export const RegisterBodySchema = {
  type: 'object',
  properties: {
    username: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
  },
  required: ['username', 'password'],
} as const;

export const RegisterDtoSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
  },
  required: ['success'],
} as const;

export const ChangeUsernameBodySchema = {
  type: 'object',
  properties: {
    newUsername: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
  },
  required: ['newUsername', 'password'],
} as const;

export const ChangePasswordBodySchema = {
  type: 'object',
  properties: {
    currentPassword: {
      type: 'string',
    },
    newPassword: {
      type: 'string',
    },
  },
  required: ['currentPassword', 'newPassword'],
} as const;

export const GetTotpUriBodySchema = {
  type: 'object',
  properties: {
    password: {
      type: 'string',
    },
  },
  required: ['password'],
} as const;

export const GetTotpUriDtoSchema = {
  type: 'object',
  properties: {
    key: {
      type: 'string',
    },
    uri: {
      type: 'string',
    },
  },
  required: ['key', 'uri'],
} as const;

export const SetupTotpBodySchema = {
  type: 'object',
  properties: {
    code: {
      type: 'string',
    },
  },
  required: ['code'],
} as const;

export const DisableTotpBodySchema = {
  type: 'object',
  properties: {
    password: {
      type: 'string',
    },
  },
  required: ['password'],
} as const;

export const ResetPasswordBodySchema = {
  type: 'object',
  properties: {
    newPassword: {
      type: 'string',
    },
  },
  required: ['newPassword'],
} as const;

export const ResetPasswordDtoSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    email: {
      type: 'string',
    },
  },
  required: ['success', 'email'],
} as const;

export const CheckResetPasswordRequestDtoSchema = {
  type: 'object',
  properties: {
    isRequestPending: {
      type: 'boolean',
    },
  },
  required: ['isRequestPending'],
} as const;

export const MyAppsDtoSchema = {
  type: 'object',
  properties: {
    installed: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          app: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
              },
              status: {
                type: 'string',
                enum: [
                  'running',
                  'stopped',
                  'starting',
                  'stopping',
                  'updating',
                  'missing',
                  'installing',
                  'uninstalling',
                  'resetting',
                  'restarting',
                  'backing_up',
                  'restoring',
                ],
              },
              lastOpened: {
                type: 'string',
                nullable: true,
              },
              numOpened: {
                type: 'number',
                default: 0,
              },
              createdAt: {
                type: 'string',
              },
              updatedAt: {
                type: 'string',
              },
              version: {
                type: 'number',
              },
              exposed: {
                type: 'boolean',
              },
              openPort: {
                type: 'boolean',
              },
              exposedLocal: {
                type: 'boolean',
              },
              domain: {
                type: 'string',
                nullable: true,
              },
              isVisibleOnGuestDashboard: {
                type: 'boolean',
              },
            },
            required: ['id', 'status', 'lastOpened', 'version', 'exposed', 'openPort', 'exposedLocal', 'domain', 'isVisibleOnGuestDashboard'],
          },
          info: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
              },
              name: {
                type: 'string',
              },
              short_desc: {
                type: 'string',
              },
              categories: {
                type: 'array',
                items: {
                  type: 'string',
                  enum: [
                    'network',
                    'media',
                    'development',
                    'automation',
                    'social',
                    'utilities',
                    'photography',
                    'security',
                    'featured',
                    'books',
                    'data',
                    'music',
                    'finance',
                    'gaming',
                    'ai',
                  ],
                },
                default: [],
              },
              deprecated: {
                type: 'boolean',
                default: false,
              },
              created_at: {
                type: 'integer',
                minimum: 0,
                exclusiveMinimum: false,
                default: 0,
              },
              supported_architectures: {
                type: 'array',
                items: {
                  type: 'string',
                  enum: ['arm64', 'amd64'],
                },
              },
              available: {
                type: 'boolean',
              },
            },
            required: ['id', 'name', 'short_desc', 'available'],
          },
          updateInfo: {
            type: 'object',
            properties: {
              latestVersion: {
                type: 'number',
              },
              minTipiVersion: {
                type: 'string',
              },
              latestDockerVersion: {
                type: 'string',
              },
            },
            required: ['latestVersion'],
          },
        },
        required: ['app', 'info', 'updateInfo'],
      },
    },
  },
  required: ['installed'],
} as const;

export const GuestAppsDtoSchema = {
  type: 'object',
  properties: {
    installed: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          app: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
              },
              status: {
                type: 'string',
                enum: [
                  'running',
                  'stopped',
                  'starting',
                  'stopping',
                  'updating',
                  'missing',
                  'installing',
                  'uninstalling',
                  'resetting',
                  'restarting',
                  'backing_up',
                  'restoring',
                ],
              },
              lastOpened: {
                type: 'string',
                nullable: true,
              },
              numOpened: {
                type: 'number',
                default: 0,
              },
              createdAt: {
                type: 'string',
              },
              updatedAt: {
                type: 'string',
              },
              version: {
                type: 'number',
              },
              exposed: {
                type: 'boolean',
              },
              openPort: {
                type: 'boolean',
              },
              exposedLocal: {
                type: 'boolean',
              },
              domain: {
                type: 'string',
                nullable: true,
              },
              isVisibleOnGuestDashboard: {
                type: 'boolean',
              },
            },
            required: ['id', 'status', 'lastOpened', 'version', 'exposed', 'openPort', 'exposedLocal', 'domain', 'isVisibleOnGuestDashboard'],
          },
          info: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
              },
              available: {
                type: 'boolean',
              },
              deprecated: {
                type: 'boolean',
                default: false,
              },
              port: {
                type: 'number',
                minimum: 1,
                exclusiveMinimum: false,
                maximum: 65535,
                exclusiveMaximum: false,
              },
              name: {
                type: 'string',
              },
              description: {
                type: 'string',
                default: '',
              },
              version: {
                type: 'string',
                default: 'latest',
              },
              tipi_version: {
                type: 'number',
              },
              short_desc: {
                type: 'string',
              },
              author: {
                type: 'string',
              },
              source: {
                type: 'string',
              },
              website: {
                type: 'string',
              },
              force_expose: {
                type: 'boolean',
                default: false,
              },
              generate_vapid_keys: {
                type: 'boolean',
                default: false,
              },
              categories: {
                type: 'array',
                items: {
                  type: 'string',
                  enum: [
                    'network',
                    'media',
                    'development',
                    'automation',
                    'social',
                    'utilities',
                    'photography',
                    'security',
                    'featured',
                    'books',
                    'data',
                    'music',
                    'finance',
                    'gaming',
                    'ai',
                  ],
                },
                default: [],
              },
              url_suffix: {
                type: 'string',
              },
              form_fields: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    type: {
                      type: 'string',
                      enum: ['text', 'password', 'email', 'number', 'fqdn', 'ip', 'fqdnip', 'url', 'random', 'boolean'],
                    },
                    label: {
                      type: 'string',
                    },
                    placeholder: {
                      type: 'string',
                    },
                    max: {
                      type: 'number',
                    },
                    min: {
                      type: 'number',
                    },
                    hint: {
                      type: 'string',
                    },
                    options: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          label: {
                            type: 'string',
                          },
                          value: {
                            type: 'string',
                          },
                        },
                        required: ['label', 'value'],
                      },
                    },
                    required: {
                      type: 'boolean',
                      default: false,
                    },
                    default: {
                      oneOf: [
                        {
                          type: 'boolean',
                        },
                        {
                          type: 'string',
                        },
                        {
                          type: 'number',
                        },
                      ],
                    },
                    regex: {
                      type: 'string',
                    },
                    pattern_error: {
                      type: 'string',
                    },
                    env_variable: {
                      type: 'string',
                    },
                    encoding: {
                      type: 'string',
                      enum: ['hex', 'base64'],
                    },
                  },
                  required: ['type', 'label', 'env_variable'],
                },
                default: [],
              },
              https: {
                type: 'boolean',
                default: false,
              },
              exposable: {
                type: 'boolean',
                default: false,
              },
              no_gui: {
                type: 'boolean',
                default: false,
              },
              supported_architectures: {
                type: 'array',
                items: {
                  type: 'string',
                  enum: ['arm64', 'amd64'],
                },
              },
              uid: {
                type: 'number',
              },
              gid: {
                type: 'number',
              },
              dynamic_config: {
                type: 'boolean',
                default: false,
              },
              min_tipi_version: {
                type: 'string',
              },
              created_at: {
                type: 'integer',
                minimum: 0,
                exclusiveMinimum: false,
                default: 0,
              },
              updated_at: {
                type: 'integer',
                minimum: 0,
                exclusiveMinimum: false,
                default: 0,
              },
            },
            required: ['id', 'available', 'port', 'name', 'tipi_version', 'short_desc', 'author', 'source'],
          },
          updateInfo: {
            type: 'object',
            properties: {
              latestVersion: {
                type: 'number',
              },
              minTipiVersion: {
                type: 'string',
              },
              latestDockerVersion: {
                type: 'string',
              },
            },
            required: ['latestVersion'],
          },
        },
        required: ['app', 'info', 'updateInfo'],
      },
    },
  },
  required: ['installed'],
} as const;

export const SearchAppsDtoSchema = {
  type: 'object',
  properties: {
    data: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          short_desc: {
            type: 'string',
          },
          categories: {
            type: 'array',
            items: {
              type: 'string',
              enum: [
                'network',
                'media',
                'development',
                'automation',
                'social',
                'utilities',
                'photography',
                'security',
                'featured',
                'books',
                'data',
                'music',
                'finance',
                'gaming',
                'ai',
              ],
            },
            default: [],
          },
          deprecated: {
            type: 'boolean',
            default: false,
          },
          created_at: {
            type: 'integer',
            minimum: 0,
            exclusiveMinimum: false,
            default: 0,
          },
          supported_architectures: {
            type: 'array',
            items: {
              type: 'string',
              enum: ['arm64', 'amd64'],
            },
          },
          available: {
            type: 'boolean',
          },
        },
        required: ['id', 'name', 'short_desc', 'available'],
      },
    },
    nextCursor: {
      type: 'string',
    },
    total: {
      type: 'number',
    },
  },
  required: ['data', 'total'],
} as const;

export const AppDetailsDtoSchema = {
  type: 'object',
  properties: {
    info: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
        },
        available: {
          type: 'boolean',
        },
        deprecated: {
          type: 'boolean',
          default: false,
        },
        port: {
          type: 'number',
          minimum: 1,
          exclusiveMinimum: false,
          maximum: 65535,
          exclusiveMaximum: false,
        },
        name: {
          type: 'string',
        },
        description: {
          type: 'string',
          default: '',
        },
        version: {
          type: 'string',
          default: 'latest',
        },
        tipi_version: {
          type: 'number',
        },
        short_desc: {
          type: 'string',
        },
        author: {
          type: 'string',
        },
        source: {
          type: 'string',
        },
        website: {
          type: 'string',
        },
        force_expose: {
          type: 'boolean',
          default: false,
        },
        generate_vapid_keys: {
          type: 'boolean',
          default: false,
        },
        categories: {
          type: 'array',
          items: {
            type: 'string',
            enum: [
              'network',
              'media',
              'development',
              'automation',
              'social',
              'utilities',
              'photography',
              'security',
              'featured',
              'books',
              'data',
              'music',
              'finance',
              'gaming',
              'ai',
            ],
          },
          default: [],
        },
        url_suffix: {
          type: 'string',
        },
        form_fields: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              type: {
                type: 'string',
                enum: ['text', 'password', 'email', 'number', 'fqdn', 'ip', 'fqdnip', 'url', 'random', 'boolean'],
              },
              label: {
                type: 'string',
              },
              placeholder: {
                type: 'string',
              },
              max: {
                type: 'number',
              },
              min: {
                type: 'number',
              },
              hint: {
                type: 'string',
              },
              options: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    label: {
                      type: 'string',
                    },
                    value: {
                      type: 'string',
                    },
                  },
                  required: ['label', 'value'],
                },
              },
              required: {
                type: 'boolean',
                default: false,
              },
              default: {
                oneOf: [
                  {
                    type: 'boolean',
                  },
                  {
                    type: 'string',
                  },
                  {
                    type: 'number',
                  },
                ],
              },
              regex: {
                type: 'string',
              },
              pattern_error: {
                type: 'string',
              },
              env_variable: {
                type: 'string',
              },
              encoding: {
                type: 'string',
                enum: ['hex', 'base64'],
              },
            },
            required: ['type', 'label', 'env_variable'],
          },
          default: [],
        },
        https: {
          type: 'boolean',
          default: false,
        },
        exposable: {
          type: 'boolean',
          default: false,
        },
        no_gui: {
          type: 'boolean',
          default: false,
        },
        supported_architectures: {
          type: 'array',
          items: {
            type: 'string',
            enum: ['arm64', 'amd64'],
          },
        },
        uid: {
          type: 'number',
        },
        gid: {
          type: 'number',
        },
        dynamic_config: {
          type: 'boolean',
          default: false,
        },
        min_tipi_version: {
          type: 'string',
        },
        created_at: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: false,
          default: 0,
        },
        updated_at: {
          type: 'integer',
          minimum: 0,
          exclusiveMinimum: false,
          default: 0,
        },
      },
      required: ['id', 'available', 'port', 'name', 'tipi_version', 'short_desc', 'author', 'source'],
    },
    app: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
        },
        status: {
          type: 'string',
          enum: [
            'running',
            'stopped',
            'starting',
            'stopping',
            'updating',
            'missing',
            'installing',
            'uninstalling',
            'resetting',
            'restarting',
            'backing_up',
            'restoring',
          ],
        },
        lastOpened: {
          type: 'string',
          nullable: true,
        },
        numOpened: {
          type: 'number',
          default: 0,
        },
        createdAt: {
          type: 'string',
        },
        updatedAt: {
          type: 'string',
        },
        version: {
          type: 'number',
        },
        exposed: {
          type: 'boolean',
        },
        openPort: {
          type: 'boolean',
        },
        exposedLocal: {
          type: 'boolean',
        },
        domain: {
          type: 'string',
          nullable: true,
        },
        isVisibleOnGuestDashboard: {
          type: 'boolean',
        },
      },
      required: ['id', 'status', 'lastOpened', 'version', 'exposed', 'openPort', 'exposedLocal', 'domain', 'isVisibleOnGuestDashboard'],
    },
    updateInfo: {
      type: 'object',
      properties: {
        latestVersion: {
          type: 'number',
        },
        minTipiVersion: {
          type: 'string',
        },
        latestDockerVersion: {
          type: 'string',
        },
      },
      required: ['latestVersion'],
    },
  },
  required: ['info', 'app', 'updateInfo'],
} as const;

export const AppFormBodySchema = {
  type: 'object',
  properties: {
    exposed: {
      type: 'boolean',
    },
    exposedLocal: {
      type: 'boolean',
    },
    openPort: {
      type: 'boolean',
      default: true,
    },
    domain: {
      type: 'string',
    },
    isVisibleOnGuestDashboard: {
      type: 'boolean',
    },
  },
} as const;

export const RestoreAppBackupDtoSchema = {
  type: 'object',
  properties: {
    filename: {
      type: 'string',
    },
  },
  required: ['filename'],
} as const;

export const GetAppBackupsDtoSchema = {
  type: 'object',
  properties: {
    data: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          size: {
            type: 'number',
          },
          date: {
            type: 'number',
          },
        },
        required: ['id', 'size', 'date'],
      },
    },
    total: {
      type: 'number',
    },
    currentPage: {
      type: 'number',
    },
    lastPage: {
      type: 'number',
    },
  },
  required: ['data', 'total', 'currentPage', 'lastPage'],
} as const;

export const DeleteAppBackupBodyDtoSchema = {
  type: 'object',
  properties: {
    filename: {
      type: 'string',
    },
  },
  required: ['filename'],
} as const;

export const LinksDtoSchema = {
  type: 'object',
  properties: {
    links: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'number',
          },
          title: {
            type: 'string',
            minLength: 1,
            maxLength: 20,
          },
          description: {
            type: 'string',
            minLength: 0,
            maxLength: 50,
            nullable: true,
          },
          url: {
            type: 'string',
            format: 'uri',
          },
          iconUrl: {
            oneOf: [
              {
                type: 'string',
                format: 'uri',
              },
              {
                type: 'string',
                maxLength: 0,
              },
            ],
            nullable: true,
          },
          userId: {
            type: 'number',
          },
        },
        required: ['id', 'title', 'description', 'url', 'iconUrl', 'userId'],
      },
    },
  },
  required: ['links'],
} as const;

export const LinkBodyDtoSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      minLength: 1,
      maxLength: 20,
    },
    url: {
      type: 'string',
      format: 'uri',
    },
    description: {
      type: 'string',
      minLength: 0,
      maxLength: 50,
    },
    iconUrl: {
      oneOf: [
        {
          type: 'string',
          format: 'uri',
        },
        {
          type: 'string',
          maxLength: 0,
        },
      ],
    },
  },
  required: ['title', 'url'],
} as const;

export const EditLinkBodyDtoSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      minLength: 1,
      maxLength: 20,
    },
    url: {
      type: 'string',
      format: 'uri',
    },
    description: {
      type: 'string',
      minLength: 0,
      maxLength: 50,
    },
    iconUrl: {
      oneOf: [
        {
          type: 'string',
          format: 'uri',
        },
        {
          type: 'string',
          maxLength: 0,
        },
      ],
    },
  },
  required: ['title', 'url'],
} as const;
